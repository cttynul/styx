# routers/vulnerability_router.py

from fastapi import APIRouter, Depends, HTTPException
from typing import List, Dict, Optional
from models.vulnerability_model import Vulnerability
from models.asset_model import Asset
from services.data_service import DataService

# Creiamo un'istanza del DataService
data_service = DataService()

router = APIRouter(
    prefix="/vulnerabilities",
    tags=["Vulnerabilities"]
)

router_assets = APIRouter(
    prefix="/assets",
    tags=["Assets"]
)

@router.get("/", response_model=List[Vulnerability], summary="Get all vulnerabilities")
async def get_all_vulnerabilities():
    """
    Retrieves a list of all simulated infrastructure vulnerabilities.
    """
    return data_service.get_all_vulnerabilities()

@router.get("/kpis/summary", summary="Get overall security posture KPIs")
async def get_kpis_summary():
    """
    Calculates and returns key performance indicators (KPIs)
    related to the overall security posture for the entire dataset.
    """
    return data_service.get_kpis_summary()

@router.get("/kpis/per_server", summary="Get vulnerabilities per server")
async def get_vulnerabilities_per_server():
    """
    Calculates and returns the number of vulnerabilities for each server,
    including servers with zero vulnerabilities.
    """
    return data_service.get_vulnerabilities_per_server()

@router.get("/kpis/over_time", summary="Get vulnerabilities discovery trend over time")
async def get_vulnerabilities_over_time():
    """
    Tracks the trend of discovered vulnerabilities over time for the entire dataset.
    """
    return data_service.get_vulnerabilities_over_time()

@router.get("/offices", response_model=List[str], summary="Get unique office IDs")
async def get_unique_office_ids():
    """
    Retrieves a list of all unique office/company IDs present in the asset data.
    """
    return data_service.get_unique_office_ids()

@router.get("/by_office/{office_id}", response_model=List[Vulnerability], summary="Get vulnerabilities by office ID")
async def get_vulnerabilities_by_office_id(office_id: str):
    """
    Retrieves a list of simulated infrastructure vulnerabilities for a specific office ID.
    """
    if office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")
        
    vulnerabilities = data_service.get_vulnerabilities_by_office(office_id)
    return vulnerabilities

@router.get("/kpis/summary_by_office/{office_id}", summary="Get security posture KPIs for a specific office")
async def get_kpis_summary_by_office(office_id: str):
    """
    Calculates and returns key performance indicators (KPIs)
    related to the security posture for a specific office/company.
    """
    if office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")
        
    summary = data_service.get_kpis_summary_for_office(office_id)
    return summary

@router.get("/kpis/per_server_by_office/{office_id}", summary="Get vulnerabilities per server for a specific office")
async def get_vulnerabilities_per_server_by_office(office_id: str):
    """
    Calculates and returns the number of vulnerabilities for each server
    within a specific office, including servers with zero vulnerabilities.
    """
    if office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")

    per_server_data = data_service.get_vulnerabilities_per_server_for_office(office_id)
    return per_server_data

@router.get("/kpis/over_time_by_office/{office_id}", summary="Get vulnerabilities discovery trend over time for a specific office")
async def get_vulnerabilities_over_time_by_office(office_id: str):
    """
    Tracks the trend of discovered vulnerabilities over time for a specific office.
    """
    if office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")

    over_time_data = data_service.get_vulnerabilities_over_time_for_office(office_id)
    return over_time_data

# NUOVO ENDPOINT: Ottieni tutte le vulnerabilit√† per la tabella
@router.get("/all_for_table", summary="Get all vulnerabilities formatted for table display", response_model=List[Dict])
@router.get("/all_for_table/{office_id}", summary="Get vulnerabilities for a specific office formatted for table display", response_model=List[Dict])
async def get_all_vulnerabilities_for_table(office_id: Optional[str] = None):
    """
    Retrieves a list of all vulnerabilities (or filtered by office) formatted for table display,
    including SLA status.
    """
    if office_id and office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")
    
    return data_service.get_all_vulnerabilities_for_table(office_id)


# --- Endpoint per gli Asset ---

@router_assets.get("/", response_model=List[Asset], summary="Get all assets")
async def get_all_assets():
    """
    Retrieves a list of all simulated infrastructure assets.
    """
    return data_service.get_all_assets()

@router_assets.get("/{server_id}", response_model=Asset, summary="Get asset by Server ID")
async def get_asset_by_id(server_id: str):
    """
    Retrieves a single asset's details by its Server ID.
    """
    asset = data_service.get_asset_by_server_id(server_id)
    if not asset:
        raise HTTPException(status_code=404, detail=f"Asset with Server ID '{server_id}' not found.")
    return asset

@router_assets.get("/by_office/{office_id}", response_model=List[Asset], summary="Get assets by Office ID")
async def get_assets_by_office_id(office_id: str):
    """
    Retrieves a list of assets for a specific office ID.
    """
    if office_id not in data_service.get_unique_office_ids():
        raise HTTPException(status_code=404, detail=f"Office ID '{office_id}' not found in assets.")
    
    assets = data_service.get_assets_by_office(office_id)
    return assets